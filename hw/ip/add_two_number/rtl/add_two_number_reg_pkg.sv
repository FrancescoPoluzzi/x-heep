// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package add_two_number_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 4;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [31:0] q;} add_two_number_reg2hw_add_two_number_operand0_reg_t;

  typedef struct packed {logic [31:0] q;} add_two_number_reg2hw_add_two_number_operand1_reg_t;

  typedef struct packed {logic [31:0] q;} add_two_number_reg2hw_add_two_number_result_reg_t;

  typedef struct packed {logic q;} add_two_number_reg2hw_add_two_number_ctrl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } add_two_number_hw2reg_add_two_number_operand0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } add_two_number_hw2reg_add_two_number_operand1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } add_two_number_hw2reg_add_two_number_result_reg_t;

  typedef struct packed {
    logic d;
    logic de;
  } add_two_number_hw2reg_add_two_number_ctrl_reg_t;

  // Register -> HW type
  typedef struct packed {
    add_two_number_reg2hw_add_two_number_operand0_reg_t add_two_number_operand0;  // [96:65]
    add_two_number_reg2hw_add_two_number_operand1_reg_t add_two_number_operand1;  // [64:33]
    add_two_number_reg2hw_add_two_number_result_reg_t add_two_number_result;  // [32:1]
    add_two_number_reg2hw_add_two_number_ctrl_reg_t add_two_number_ctrl;  // [0:0]
  } add_two_number_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    add_two_number_hw2reg_add_two_number_operand0_reg_t add_two_number_operand0;  // [100:68]
    add_two_number_hw2reg_add_two_number_operand1_reg_t add_two_number_operand1;  // [67:35]
    add_two_number_hw2reg_add_two_number_result_reg_t add_two_number_result;  // [34:2]
    add_two_number_hw2reg_add_two_number_ctrl_reg_t add_two_number_ctrl;  // [1:0]
  } add_two_number_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] ADD_TWO_NUMBER_ADD_TWO_NUMBER_OPERAND0_OFFSET = 4'h0;
  parameter logic [BlockAw-1:0] ADD_TWO_NUMBER_ADD_TWO_NUMBER_OPERAND1_OFFSET = 4'h4;
  parameter logic [BlockAw-1:0] ADD_TWO_NUMBER_ADD_TWO_NUMBER_RESULT_OFFSET = 4'h8;
  parameter logic [BlockAw-1:0] ADD_TWO_NUMBER_ADD_TWO_NUMBER_CTRL_OFFSET = 4'hc;

  // Register index
  typedef enum int {
    ADD_TWO_NUMBER_ADD_TWO_NUMBER_OPERAND0,
    ADD_TWO_NUMBER_ADD_TWO_NUMBER_OPERAND1,
    ADD_TWO_NUMBER_ADD_TWO_NUMBER_RESULT,
    ADD_TWO_NUMBER_ADD_TWO_NUMBER_CTRL
  } add_two_number_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] ADD_TWO_NUMBER_PERMIT[4] = '{
      4'b1111,  // index[0] ADD_TWO_NUMBER_ADD_TWO_NUMBER_OPERAND0
      4'b1111,  // index[1] ADD_TWO_NUMBER_ADD_TWO_NUMBER_OPERAND1
      4'b1111,  // index[2] ADD_TWO_NUMBER_ADD_TWO_NUMBER_RESULT
      4'b0001  // index[3] ADD_TWO_NUMBER_ADD_TWO_NUMBER_CTRL
  };

endpackage

